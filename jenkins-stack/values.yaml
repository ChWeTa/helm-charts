jenkins:
  enabled: true
  persistence:
    enabled: true
    size: 150Gi
  controller:
    # Why shouldn't I set Xmx and Xms - https://docs.cloudbees.com/docs/cloudbees-ci-kb/latest/best-practices/jvm-memory-settings-best-practice
    javaOpts: "-XX:InitialRAMPercentage=50.0 -XX:MaxRAMPercentage=50.0 -Duser.timezone=America/Chicago"
    # only enable this when plugin needs to be updated
    #initializeOnce: false
    numExecutors: 30
    adminUser: "admin"
    adminPassword: "f00B@r"
    imagePullPolicy: Always
    image: "jenkins/jenkins"
    tag: "2.426.3-jdk17"
    ingress:
      ingressClassName: nginx
      enabled: true
      hostName: jenkins.kube-int.kennysbasement.com
    resources:
      limits:
        cpu: 1500m
        memory: 3Gi
      requests:
        cpu: 1500m
        memory: 3Gi
    sidecars:
      configAutoReload:
        enabled: false
    # Need this to properly render HTML reports - https://www.jenkins.io/doc/book/security/configuring-content-security-policy/
    initScripts:
      - |
        System.setProperty("hudson.model.DirectoryBrowserSupport.CSP", "sandbox allow-same-origin allow-scripts; default-src *; style-src * 'unsafe-inline'; script-src * 'unsafe-inline' 'unsafe-eval' ; font-src * data: ");
    JCasC:
      defaultConfig: true
      configScripts:
        welcome-message: |
          jenkins:
            systemMessage: JENKINS POWER
      security:
        globalJobDslSecurityConfiguration:
          useScriptSecurity: false
  agent:
    containerCap: 30
  rbac:
    readSecrets: true
sonarqube:
  enabled: false
  resources:
    limits:
      cpu: 1500m
      memory: 3Gi
    requests:
      cpu: 1500m
      memory: 3Gi
  initContainers:
    image: busybox:1.32
  initSysctl:
    image: busybox:1.32
  initFs:
    image: busybox:1.32
  extraInitContainers:
    - command:
        - sh
        - -e
        - /tmp/scripts/init_sysctl.sh
      image: busybox:1.32
      imagePullPolicy: IfNotPresent
      name: init-sysctl-community-branch-plugin
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
        - mountPath: /tmp/scripts/
          name: init-sysctl
    - command:
        - sh
        - -c
        - sh -e /tmp/scripts/install_plugins.sh; cp -r /opt/sonarqube/extensions/downloads/*
          /opt/sonarqube/extensions/plugins/
      image: rjkernick/alpine-wget:latest
      imagePullPolicy: IfNotPresent
      name: install-plugin-community-branch-plugin
      resources: {}
      securityContext:
        runAsGroup: 1000
        runAsUser: 1000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
        - mountPath: /opt/sonarqube/extensions/downloads
          name: sonarqube
          subPath: extensions/downloads
        - mountPath: /opt/sonarqube/extensions/plugins
          name: sonarqube
          subPath: extensions/plugins
        - mountPath: /opt/sonarqube/lib/common
          name: sonarqube
          subPath: lib/common
        - mountPath: /tmp/scripts/
          name: install-plugins
  image:
    pullPolicy: IfNotPresent
    repository: sonarqube
    tag: 9.9.0-community
  ingress:
    ingressClassName: nginx
    enabled: true
    hosts:
      - name: sonarqube.kube-int.kennysbasement.com
  jvmCeOpts: -Xmx2G -javaagent:./extensions/plugins/sonarqube-community-branch-plugin-1.14.0.jar=ce
  jvmOpts: -Xmx2G -javaagent:./extensions/plugins/sonarqube-community-branch-plugin-1.14.0.jar=web
  persistence:
    enabled: false
    # mounts:
    # - mountPath: /opt/sonarqube/extensions/plugins
    #   name: sonarqube
    #   subPath: extensions/plugins
    # size: 50Gi
    # storageClass: encrypted-gp2
  plugins:
    image: curlimages/curl:8.2.0
    install:
      - https://github.com/mc1arke/sonarqube-community-branch-plugin/releases/download/1.14.0/sonarqube-community-branch-plugin-1.14.0.jar
    # lib:
    #   - sonarqube-community-branch-plugin-1.14.0.jar
  postgresql:
    # Enable to deploy the PostgreSQL chart
    enabled: false
postgres:
  enabled: false
  architecture: standalone
  clusterDomain: cluster.local
  global:
    imagePullSecrets: []
    imageRegistry: ""
    postgresql:
      auth:
        database: 'sonarDB'
        password: 'sonarPass'
        postgresPassword: 'sonarPass'
        username: 'sonarUser'
      service:
        ports:
          postgresql: "5432"
    storageClass: nfs-archive
  auth:
    enablePostgresUser: true
    postgresPassword: "sonarPass"
    username: "sonarUser"
    password: "sonarPass"
    database: "sonarDB"
  containerPorts:
    postgresql: 5432
  image:
    debug: false
    repository: bitnami/postgresql
    tag: 15.1.0-debian-11-r19
  postgresqlDataDir: /bitnami/postgresql/data
  postgresqlSharedPreloadLibraries: pgaudit
  primary:
    persistence:
      accessModes:
        - ReadWriteOnce
      enabled: true
      mountPath: /bitnami/postgresql
      size: 400Gi
      storageClass: encrypted-gp2
    resources:
      limits:
        cpu: 500m
        memory: 3Gi
      requests:
        cpu: 100m
        memory: 1Gi